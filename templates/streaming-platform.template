AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Streaming Data Platform (kafka edition), fast and safe way for data streaming
Metadata:
  Authors:
    Description: German Osin (gosin@provectus.com), Andrew Saushkin (asaushkin@provectus.com),
      Alexander Gritsenko (agritsenko@provectus.com), Andrew Paslavsky (apaslavsky@provectus.com),
      Yurii Solopov (ysolopov@provectus.com)

Parameters:

  EnvironmentName:
    Type: String
    Description: Allow distinct object this stack from different ones.

  QSS3BucketName:
    Default: 'aws-quickstart'
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String

  PublicSshKey:
    Description: SSH Key for the SFTP access
    Type: String

  BucketName:
    Type: String
    Default: ''

  InstanceType:
    Type: String
    Default: kafka.m5.large
    Description: Broker instance type

Resources:

  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/sdp-kafka/templates/vpc.template'
      Parameters:
        EnvironmentName:
          Ref: EnvironmentName

  MSKCluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/sdp-kafka/templates/msk.template'
      Parameters:
        EnvironmentName:
          Ref: EnvironmentName
        VPC:
          Fn::GetAtt:
            - VPC
            - Outputs.VPC
        PrivateSubnets:
          Fn::GetAtt:
            - VPC
            - Outputs.PrivateSubnets
        InstanceType:
          Ref: InstanceType

  ECSCluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/sdp-kafka/templates/ecs-fargate.template'
      Parameters:
        VPC:
          Fn::GetAtt:
            - VPC
            - Outputs.VPC
        EnvironmentName:
          Ref: EnvironmentName
        PrivateSubnets:
          Fn::GetAtt:
            - VPC
            - Outputs.PrivateSubnets
        PublicSubnets:
          Fn::GetAtt:
            - VPC
            - Outputs.PublicSubnets
        ServiceName: !Sub 'sdp-${EnvironmentName}'
        KafkaClientInstanceSecurityGroup:
          Fn::GetAtt:
            - MSKCluster
            - Outputs.KafkaClientInstanceSecurityGroupID
        ZookeeperServers:
          Fn::GetAtt:
            - MSKCluster
            - Outputs.MskZookeepers
        BootstrapServers:
          Fn::GetAtt:
            - MSKCluster
            - Outputs.MskBrokers

  SchemaRegistry:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/sdp-kafka/templates/schema-registry.template'
      Parameters:
        VPC:
          Fn::GetAtt:
            - VPC
            - Outputs.VPC
        PrivateSubnets:
          Fn::GetAtt:
            - VPC
            - Outputs.PrivateSubnets
        ServiceName: !Sub 'schema-registry-${EnvironmentName}'
        ExecutionRole:
          Fn::GetAtt:
            - ECSCluster
            - Outputs.ExecutionRole
        TaskRole:
          Fn::GetAtt:
            - ECSCluster
            - Outputs.TaskRole
        Cluster:
          Fn::GetAtt:
            - ECSCluster
            - Outputs.Cluster
        KafkaClientInstanceSecurityGroup:
          Fn::GetAtt:
            - MSKCluster
            - Outputs.KafkaClientInstanceSecurityGroupID
        BootstrapServers:
          Fn::GetAtt:
            - MSKCluster
            - Outputs.MskBrokers
        ZookeeperServers:
          Fn::GetAtt:
            - MSKCluster
            - Outputs.MskZookeepers
        PrivateNamespaceId:
          Fn::GetAtt:
            - ECSCluster
            - Outputs.PrivateNamespaceId

  KafkaConnect:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/sdp-kafka/templates/kafka-connect.template'
      Parameters:
        VPC:
          Fn::GetAtt:
            - VPC
            - Outputs.VPC
        PrivateSubnets:
          Fn::GetAtt:
            - VPC
            - Outputs.PrivateSubnets
        ServiceName: !Sub 'kafka-connect-${EnvironmentName}'
        SchemaRegistryUrl: !Sub 'http://schema-registry-${EnvironmentName}.sdp.local:8081'
        ExecutionRole:
          Fn::GetAtt:
            - ECSCluster
            - Outputs.ExecutionRole
        TaskRole:
          Fn::GetAtt:
            - ECSCluster
            - Outputs.TaskRole
        Cluster:
          Fn::GetAtt:
            - ECSCluster
            - Outputs.Cluster
        KafkaClientInstanceSecurityGroup:
          Fn::GetAtt:
            - MSKCluster
            - Outputs.KafkaClientInstanceSecurityGroupID
        BootstrapServers:
          Fn::GetAtt:
            - MSKCluster
            - Outputs.MskBrokers
        ZookeeperServers:
          Fn::GetAtt:
            - MSKCluster
            - Outputs.MskZookeepers
        PrivateNamespaceId:
          Fn::GetAtt:
            - ECSCluster
            - Outputs.PrivateNamespaceId

  SFTP:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/sdp-kafka/templates/sftp.template'
      Parameters:
        EnvironmentName:
          Ref: EnvironmentName
        BucketName:
          Ref: BucketName
        PublicSshKey:
          Ref: PublicSshKey



