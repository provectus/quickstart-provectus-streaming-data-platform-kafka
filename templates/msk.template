AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description:  This template deploys a MSK inside an existsing VPC.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VPC:
    Description: VPC Id for MSK cluster
    Type: String

  PrivateSubnets:
    Description: List of the subnets where MSK instance will be run
    Type: List<String>

  InstanceType:
    Description: Instance type of nodes of the MSK cluster
    Type: String

Resources:

  KafkaClientInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${EnvironmentName} Kafka clients group'
      GroupDescription: This group allows to clients have access to the MSK cluster
      VpcId: !Ref VPC

  MSKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${EnvironmentName} MSK cluster security group'
      GroupDescription: Enable access to zookeeper and kafka brokers via ports (2181, 9092, 9094)
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          SourceSecurityGroupId: !GetAtt
            - KafkaClientInstanceSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 9094
          ToPort: 9094
          SourceSecurityGroupId: !GetAtt
            - KafkaClientInstanceSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          SourceSecurityGroupId: !GetAtt
            - KafkaClientInstanceSecurityGroup
            - GroupId


  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      BrokerNodeGroupInfo:
        ClientSubnets: !Ref PrivateSubnets
        InstanceType: !Ref InstanceType
        SecurityGroups:
          - !Ref MSKSecurityGroup
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 200
      ClusterName: !Sub 'MSKCluster-${EnvironmentName}'
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS_PLAINTEXT
          InCluster: true
      EnhancedMonitoring: PER_TOPIC_PER_BROKER
      KafkaVersion: 2.3.1
      NumberOfBrokerNodes: 3

  MskInfo:
    Type: Custom::MSK
    Properties:
      ServiceToken: !GetAtt MskInfoFunction.Arn
      MskArn: !Ref MSKCluster
      Brokers: ''
      BrokersTls: ''
      Zookeepers: ''

  MskInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: >
          var response = require('cfn-response');
          var aws = require('aws-sdk');
          exports.handler = function(event, context) {
            var kafka = new aws.Kafka({apiVersion: '2018-11-14'});
            var params = {
                ClusterArn: event.ResourceProperties.MskArn
            };
            var responseStatus = "FAILED"
            var responseData = {}
            kafka.getBootstrapBrokers(params, function(err, data) {
              if (err) {
                responseData = {Error: "Invoke call getBootstrapBrokers failed"}
                console.log(responseData.Error + ":\n", err)
              }
              else {
                console.log(data);
                kafka.describeCluster(params, function(err, dataDescribe) {
                  if (err) {
                    responseData = {Error: "Invoke call describeCluster failed"}
                    console.log(responseData.Error + ":\n", err)
                  }
                  else {
                    responseData = {
                      Brokers: data.BootstrapBrokerString,
                      BrokersTls: data.BootstrapBrokerStringTls,
                      Zookeepers: dataDescribe.ClusterInfo.ZookeeperConnectString
                    };
                    responseStatus = "SUCCESS"
                  }
                  response.send(event, context, responseStatus, responseData)
                });
              }
            });
          };

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: kafka
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kafka:Describe*
                  - kafka:GetBootstrapBrokers
                Resource: arn:aws:kafka:*:*:*


Outputs:

  KafkaClientInstanceSecurityGroupID:
    Description: The ID of the security group created for the kafka clients
    Value: !GetAtt
      - KafkaClientInstanceSecurityGroup
      - GroupId

  MSKSecurityGroupID:
    Description: The ID of the security group created for the MSK clusters
    Value: !GetAtt
      - MSKSecurityGroup
      - GroupId

  MSKClusterArn:
    Description: The Arn for the MSK cluster
    Value: !Ref MSKCluster

  MskBrokers:
    Description: MSK Brokers
    Value: !GetAtt MskInfo.Brokers
    Export:
      Name: !Sub ${EnvironmentName}:MskBrokers
  MskBrokersTls:
    Description: MSK TLS Brokers
    Value: !GetAtt MskInfo.BrokersTls
    Export:
      Name: !Sub ${EnvironmentName}:MskBrokersTls
  MskZookeepers:
    Description: MSK Zookeepers
    Value: !GetAtt MskInfo.Zookeepers
    Export:
      Name: !Sub ${EnvironmentName}:Zookeepers
